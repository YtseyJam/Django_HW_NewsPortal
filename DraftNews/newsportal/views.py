from django.shortcuts import render
from django.contrib.auth.mixins import LoginRequiredMixin, PermissionRequiredMixin
from django.contrib.auth.models import Group
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞–º –æ —Ç–æ–º,
# —á—Ç–æ –≤ —ç—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –º—ã –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ë–î
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import Post, Category, Author
from .filters import PostFilter
from .forms import NewsForm
from datetime import datetime
from django.contrib.auth.decorators import login_required
from django.db.models import Exists, OuterRef
from django.views.decorators.csrf import csrf_protect
from django.shortcuts import get_object_or_404
from django.shortcuts import redirect
from django.utils.decorators import method_decorator

#celery tasks
from django.http import HttpResponse
from django.views import View
from .tasks import hello

from django.core.cache import cache #–∫—ç—à


@method_decorator(login_required, name='dispatch')
class NewsList(ListView):
    # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å, –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä–æ–π –º—ã –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å
    model = Post
    # –ü–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    ordering = 'post_datetime'
    # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ —Ç–æ–º,
    # –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã
    template_name = 'all_news.html'
    # –≠—Ç–æ –∏–º—è —Å–ø–∏—Å–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ª–µ–∂–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã.
    # –ï–≥–æ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –≤ html-—à–∞–±–ª–æ–Ω–µ.
    context_object_name = 'news'
    paginate_by = 10 #–≤–æ—Ç —Ç–∞–∫ –º—ã –º–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    def get_queryset(self):
        queryset = super().get_queryset().order_by('-post_datetime')
        self.filterset = PostFilter(self.request.GET, queryset)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        return self.filterset.qs

    def get_context_data(self, **kwargs):
        # –° –ø–æ–º–æ—â—å—é super() –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–ª–∞—Å—Å–∞–º
        # –∏ –≤—ã–∑—ã–≤–∞–µ–º —É –Ω–∏—Ö –º–µ—Ç–æ–¥ get_context_data —Å —Ç–µ–º–∏ –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏,
        # —á—Ç–æ –∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–º.
        # –í –æ—Ç–≤–µ—Ç–µ –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å.
        context = super().get_context_data(**kwargs)
        # –ö —Å–ª–æ–≤–∞—Ä—é –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –∫–ª—é—á 'time_now'.
        context['time_now'] = datetime.utcnow()
        # –î–æ–±–∞–≤–∏–º –µ—â—ë –æ–¥–Ω—É –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é,
        # —á—Ç–æ–±—ã –Ω–∞ –µ—ë –ø—Ä–∏–º–µ—Ä–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—É –µ—â—ë –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.
        context['next_sale'] = None
        context['filterset'] = self.filterset

        context['is_author'] = self.request.user.groups.filter(name='authors').exists()

        return context

@login_required
def upgrade_user(request):
    user = request.user
    group = Group.objects.get(name='authors')
    if not user.groups.filter(name='authors').exists():
        group.user_set.add(user)
        Author.objects.create(user=user)
    return redirect('/news')


class NewsDetail(DetailView):
    # –ú–æ–¥–µ–ª—å –≤—Å—ë —Ç–∞ –∂–µ, –Ω–æ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
    model = Post
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω ‚Äî product.html
    template_name = 'exactly_news.html'
    # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–¥—É–∫—Ç
    context_object_name = 'exactly_news'
    queryset = Post.objects.all()

    def get_object(self, *args, **kwargs):
        obj = cache.get(f'post-{self.kwargs["pk"]}', None)

        # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à
        if not obj:
            obj = super().get_object(queryset=self.queryset)
            cache.set(f'post-{self.kwargs["pk"]}', obj)
        return obj

class NewsSearch(NewsList):
    model = Post
    template_name = 'news_search.html'
    context_object_name = 'news_search'

class NewsCreate(PermissionRequiredMixin, CreateView):
    raise_exception = True
    permission_required = ('newsportal.add_post',)  #<app>.<action>_<model>

    form_class = NewsForm
    model = Post
    template_name = 'news_edit.html'

    def form_valid(self, form):
        post = form.save(commit=False)
        post.post_type = 'NEWS'
        return super().form_valid(form)

class ArtlCreate(PermissionRequiredMixin, CreateView):
    raise_exception = True
    permission_required = ('newsportal.add_post',)  # <app>.<action>_<model>

    form_class = NewsForm
    model = Post
    template_name = 'news_edit.html'

    def form_valid(self, form):
        post = form.save(commit=False)
        post.post_type = 'ARTL'
        return super().form_valid(form)

class NewsUpdate(PermissionRequiredMixin, UpdateView):
    permission_required = ('newsportal.change_post',)

    form_class = NewsForm
    model = Post
    template_name = 'news_edit.html'

class NewsDelete(PermissionRequiredMixin, DeleteView):
    permission_required = ('newsportal.delete_post',)

    model = Post
    template_name = 'news_delete.html'
    success_url = reverse_lazy('news_list')

class CategoryListView(ListView):
    """ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–Ω—É—é"""
    model = Post
    template_name = 'category_list.html'
    context_object_name = 'category_news_list'
    paginate_by = 10

    def get_queryset(self):
        self.categories = get_object_or_404(Category, id=self.kwargs['pk'])
        queryset = Post.objects.filter(categories=self.categories).order_by('-post_datetime')
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['is_not_subscriber'] = self.request.user not in self.categories.subscribers.all()
        context['category'] = self.categories
        return context

@csrf_protect
@login_required()
def subscribe(request, pk):
    user = request.user
    category = Category.objects.get(id=pk)
    category.subscribers.add(user)

    message = f'{user.username.capitalize()}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üëâ{str(category).upper()}'
    return render(request, 'subscribe.html', {'message': message})

@csrf_protect
@login_required()
def unsubscribe(request, pk):
    user = request.user
    category = Category.objects.get(id=pk)
    category.subscribers.remove(user)

    message = f'{user.username.capitalize()}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üö´{str(category).upper()}'
    return render(request, 'unsubscribe.html', {'message': message})

#Celery task
class IndexView(View):
    def get(self, request):
        hello.delay()
        return HttpResponse('Hello!')